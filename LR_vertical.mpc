from Compiler import ml
from Compiler import mpc_noise
program.use_trunc_pr = True
program.use_split(3)
#program.options_from_args()


    # parameters by args
num_f1=937
num_f2=937
num_features=num_f1+num_f2
num_epochs=300
batch_size=128
lambda_ = 1
epsilon = 1

N = 1713



start_timer(100)

train_X = sfix.Matrix(N,num_features)
train_y = sfix.Matrix(N,1)


alice_X = sfix.Matrix(N,num_f1)
bob_X = sfix.Matrix(N,num_f2)
bob_y = sfix.Matrix(N,1)

##### features followed by tragetlabels
alice_X.input_from(0)
bob_X.input_from(1)
bob_y.input_from(1)



########### Create training dataset
@for_range(N)
def _(i):
	@for_range(num_f1)
	def _(j):
        train_X[i][j] = alice_X[i][j]
        

@for_range(N)
def _(i):
	@for_range(num_f2)
	def _(j):
        train_X[i][num_f1+j] = bob_X[i][j]

train_y.assign(bob_y)


############ L2 normalize vector
@for_range(N)
def _(i):
	norm_vec = mpc_noise.normalize_(train_X[i],num_features)
	@for_range(num_features)
	def _(j):

		train_X[i][j] = norm_vec[i][j]


########### Train simple LR
import ml


ml.Layer.back_batch_size = batch_size
#debug = 'debug'

layers = [ml.Dense(N, num_features, 1),
                  ml.Output(N, approx=3)]

sgd = ml.SGD(layers,num_epochs,report_loss=True,lambda_=lambda_)
sgd.layers[0].X.assign(train_X)
sgd.layers[1].Y.assign(train_y)
sgd.reset()
sgd.run(batch_size=batch_size)
stop_timer(100)


weights = sfix.Array(num_features+1)
@for_range(num_features)
def _(i):
    weights[i] = layers[0].W[i][0]
weights[num_features] = layers[0].b[0]

noise = mpc_noise.gen_noise(num_features+1, N, epsilon=epsilon, lamb=lambda_)
noisy_weights = sfix.Array(num_features+1)
#noisy_weights.assign_vector(weights.get_vector() + noise.get_vector())

@for_range(num_features+1)
def _(i):
    noisy_weights[i] = weights[i] + noise[i]


#if debug:
#    @for_range(402)
#    def _(i):
#        print_ln('%s %s', layers[-1].Y[i].reveal(),
#                 ml.sigmoid(layers[-1].X[i]).reveal())

print_ln('Bias %s,',noisy_weights[num_features].reveal())
@for_range(num_features)
def _(i):
      print_ln('Weight %s,',noisy_weights[i].reveal())
